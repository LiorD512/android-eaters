Index: app/src/main/java/com/bupp/wood_spoon_eaters/model/OrderModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bupp.wood_spoon_eaters.model\r\n\r\nimport android.os.Parcelable\r\nimport android.util.Log\r\nimport androidx.annotation.Nullable\r\nimport com.bupp.wood_spoon_eaters.di.abs.SerializeNulls\r\nimport com.bupp.wood_spoon_eaters.features.main.order_history.OrderHistoryViewType\r\nimport com.bupp.wood_spoon_eaters.utils.DateUtils\r\nimport com.squareup.moshi.Json\r\nimport com.squareup.moshi.JsonClass\r\nimport kotlinx.parcelize.Parcelize\r\nimport java.util.*\r\n\r\nenum class OrderState{\r\n    NONE,\r\n    RECEIVED,\r\n    PREPARED,\r\n    ON_THE_WAY,\r\n    DELIVERED\r\n}\r\n\r\n@JsonClass(generateAdapter = true)\r\ndata class OrderRequest(\r\n    var cookId: Long? = null,\r\n    @Json(name = \"cooking_slot_id\") var cookingSlotId: Long? = null,\r\n    @Json(name = \"deliver_at\") var deliveryAt: String? = null,\r\n    @Json(name = \"delivery_address\") var deliveryAddress: Address? = null,\r\n    @Json(name = \"delivery_address_id\") var deliveryAddressId: Long? = null,\r\n    @Json(name = \"order_items\") var orderItemRequests: List<OrderItemRequest>? = null,\r\n    @Json(name = \"tip_percentage\") @SerializeNulls var tipPercentage: Float? = null,\r\n    @Json(name = \"tip\") var tip: Int? = null,\r\n    @Json(name = \"disposable_tableware\") var addUtensils: Boolean? = null,\r\n    @Json(name = \"shipping_service\") var shippingService: String? = null,\r\n    @Json(name = \"promo_code\") var promoCode: String? = null\r\n)\r\n\r\n@JsonClass(generateAdapter = true)\r\ndata class OrderItemRequest(\r\n    @Json(name = \"id\") var id: Long? = null,\r\n    @Json(name = \"dish_id\") val dishId: Long? = null,\r\n    @Json(name = \"quantity\") var quantity: Int? = null,\r\n    @Json(name = \"removed_ingredient_ids\") var removedIngredientsIds: List<Long>? = null,\r\n    @Json(name = \"notes\") var notes: String? = null,\r\n    @Json(name = \"_destroy\") var _destroy: Boolean? = false\r\n)\r\n\r\n@JsonClass(generateAdapter = true)\r\ndata class DeliveryDates(\r\n    val from: Date,\r\n    val to: Date\r\n)\r\n\r\n\r\n\r\n@Parcelize\r\n@JsonClass(generateAdapter = true)\r\ndata class Order (\r\n    @Json(name = \"id\") val id: Long?,\r\n    @Json(name = \"order_number\") val orderNumber: String?,\r\n    @Json(name = \"deliver_at\") val deliverAt: Date?,\r\n    @Json(name = \"created_at\") val created_at: Date?,\r\n    @Json(name = \"delivery_address\") val deliveryAddress: Address?,\r\n    @Json(name = \"estimated_delivery_time\") val estDeliveryTime: Date?,\r\n    @Json(name = \"eta_text\") val estDeliveryTimeText: String?,\r\n    @Json(name = \"status\") val status: String?,\r\n    @Json(name = \"courier\") val courier: Courier?,\r\n    @Json(name = \"promo_code\") val promoCode: String?,\r\n    @Json(name = \"status_updated_at\") val statusUpdatedAt: Date?,\r\n    @Json(name = \"delivery_status\") val deliveryStatus: String?,\r\n    @Json(name = \"preparation_status\") val preparationStatus: String?,\r\n    @Json(name = \"delivery_status_updated_at\") val deliveryStatusUpdatedAt: Date?,\r\n    @Json(name = \"tip_percentage\") val tipPercentage: Int?,\r\n    @Json(name = \"notes\") val notes: String?,\r\n    @Json(name = \"total\") val total: Price?,\r\n    @Json(name = \"eta_to_display\") val etaToDisplay: String?,\r\n    @Json(name = \"total_before_tip\") val totalBeforeTip: Price?,\r\n//    @Json(name = \"cook\") val cook: Cook?,\r\n    @Json(name = \"cook\") val restaurant: Restaurant?,\r\n    @Json(name = \"cooking_slot\") val cookingSlot: CookingSlot?,\r\n    @Json(name = \"order_items\") val orderItems: List<OrderItem>?,\r\n    @Json(name = \"subtotal\") val subtotal: Price?,\r\n    @Json(name = \"tax\") val tax: Price?,\r\n    @Json(name = \"min_order_fee\") val minOrderFee: Price?,\r\n    @Json(name = \"service_fee\") val serviceFee: Price?,\r\n    @Json(name = \"delivery_fee\") val deliveryFee: Price?,\r\n    @Json(name = \"cook_service_fee\") val cooksServiceFee: Price?,\r\n    @Json(name = \"tip\") val tip: Price?,\r\n    @Json(name = \"discount\") val discount: Price?,\r\n    @Json(name = \"was_rated\") val wasRated: Boolean?,\r\n    @Json(name = \"nationwide_shipping\") val isNationwide: Boolean?\r\n): Parcelable {\r\n    fun getOrderState(): OrderState {\r\n        Log.d(\"wowOrderState\",\"orderNumber: $orderNumber\")\r\n        Log.d(\"wowOrderState\",\"deliveryStatus: $deliveryStatus\")\r\n        Log.d(\"wowOrderState\",\"preparationStatus: $preparationStatus\")\r\n        var curOrderStage =  OrderState.NONE\r\n\r\n        when(preparationStatus){\r\n            \"idle\" -> { curOrderStage = OrderState.NONE }\r\n            \"received\" -> { curOrderStage = OrderState.RECEIVED }\r\n            \"in_progress\" -> { curOrderStage = OrderState.PREPARED }\r\n            \"completed\" -> { curOrderStage = OrderState.PREPARED }\r\n        }\r\n        when(deliveryStatus){\r\n            \"enroute\" -> { curOrderStage = OrderState.ON_THE_WAY }\r\n            \"on_the_way\" -> { curOrderStage = OrderState.ON_THE_WAY }\r\n            \"shipped\" -> { curOrderStage = OrderState.DELIVERED }\r\n        }\r\n        Log.d(\"wowOrderState\",\"curOrderStage: $curOrderStage\")\r\n        return curOrderStage\r\n    }\r\n\r\n    fun getOrderStateTitle(orderState: OrderState): String?{\r\n        return when(orderState){\r\n            OrderState.NONE -> \"Your order\"\r\n            OrderState.RECEIVED -> \"Order confirmed\"\r\n            OrderState.PREPARED -> \"Preparing your order\"\r\n            OrderState.ON_THE_WAY -> \"Delivery in progress\"\r\n            OrderState.DELIVERED -> \"Delivered\"\r\n        }\r\n    }\r\n\r\n    fun getOrderStateSubTitle(orderState: OrderState): String{\r\n        return when(orderState){\r\n            OrderState.NONE -> \"Waiting for home chef confirmation\"\r\n            OrderState.RECEIVED -> \"${restaurant?.firstName} received your order\"\r\n            OrderState.PREPARED -> \"${restaurant?.firstName} is preparing your order\"\r\n            OrderState.ON_THE_WAY -> \"Hang on! Your food is on its way\"\r\n            OrderState.DELIVERED -> \"Enjoy :)\"\r\n        }\r\n    }\r\n\r\n    fun getAllOrderItemsQuantity(): Int {\r\n        var allOrderItemsQuantity = 0\r\n        orderItems?.forEach {\r\n            allOrderItemsQuantity += it.quantity\r\n        }\r\n        return allOrderItemsQuantity\r\n    }\r\n}\r\n\r\n@Parcelize\r\n@JsonClass(generateAdapter = true)\r\ndata class OrderItem(\r\n    @Json(name = \"id\") val id: Long,\r\n    @Json(name = \"dish\") val dish: Dish,\r\n    @Json(name = \"quantity\") var quantity: Int,\r\n    @Json(name = \"matching_menu\") var menuItem: MenuItem?,\r\n//    @Json(name = \"removed_ingredients\") var removedIngredients: List<Ingredient>,\r\n    @Json(name = \"price\") val price: Price,\r\n    @Json(name = \"notes\") var notes: String?,\r\n    @Json(name = \"_destroy\") var _destroy: Boolean? = null\r\n): Parcelable {\r\n//     fun getRemovedIngredientsIds(): List<Long>{\r\n//         return removedIngredients.mapNotNull { it.id }\r\n//     }\r\n    fun toOrderItemRequest(): OrderItemRequest{\r\n        return OrderItemRequest(\r\n            id = id,\r\n            notes = notes,\r\n            dishId = dish.id,\r\n            quantity = quantity,\r\n            _destroy = _destroy\r\n        )\r\n    }\r\n//    fun getRemovedIngredients(): String?{\r\n//        var removedIngredientsStr: String? = null\r\n////        if(removedIngredients.isNotEmpty()){\r\n////            removedIngredientsStr = \"Without: \"\r\n////            removedIngredients.forEach {\r\n////                removedIngredientsStr += \"${it.name}, \"\r\n////            }\r\n////        }\r\n//        return removedIngredientsStr?.substring(0, removedIngredientsStr.length - 2)\r\n//    }\r\n    fun getNoteStr(): String?{\r\n        if(notes.isNullOrEmpty()){\r\n            return null\r\n        }\r\n        return  \"Special requests: $notes\"\r\n    }\r\n\r\n}\r\n\r\n@Parcelize\r\n@JsonClass(generateAdapter = true)\r\ndata class ShippingMethod(\r\n    val code: String,\r\n    val name: String,\r\n    val fee: Price,\r\n    val description: String\r\n): Parcelable\r\n\r\n@Parcelize\r\n@JsonClass(generateAdapter = true)\r\ndata class Courier(\r\n    val id: Long?,\r\n    val first_name: String?,\r\n    val last_name: String?,\r\n    val thumbnail: String?,\r\n    val phone_number: String?,\r\n    val email: String?,\r\n    val transport_type: String?,\r\n    val lat: Double?,\r\n    val lng: Double?\r\n): Parcelable
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bupp/wood_spoon_eaters/model/OrderModel.kt	(revision 481bb159ff7dffe4a2618c6f7e21dfb3db9da684)
+++ app/src/main/java/com/bupp/wood_spoon_eaters/model/OrderModel.kt	(date 1630340329446)
@@ -2,16 +2,13 @@
 
 import android.os.Parcelable
 import android.util.Log
-import androidx.annotation.Nullable
 import com.bupp.wood_spoon_eaters.di.abs.SerializeNulls
-import com.bupp.wood_spoon_eaters.features.main.order_history.OrderHistoryViewType
-import com.bupp.wood_spoon_eaters.utils.DateUtils
 import com.squareup.moshi.Json
 import com.squareup.moshi.JsonClass
 import kotlinx.parcelize.Parcelize
 import java.util.*
 
-enum class OrderState{
+enum class OrderState {
     NONE,
     RECEIVED,
     PREPARED,
@@ -51,10 +48,9 @@
 )
 
 
-
 @Parcelize
 @JsonClass(generateAdapter = true)
-data class Order (
+data class Order(
     @Json(name = "id") val id: Long?,
     @Json(name = "order_number") val orderNumber: String?,
     @Json(name = "deliver_at") val deliverAt: Date?,
@@ -88,30 +84,44 @@
     @Json(name = "discount") val discount: Price?,
     @Json(name = "was_rated") val wasRated: Boolean?,
     @Json(name = "nationwide_shipping") val isNationwide: Boolean?
-): Parcelable {
+) : Parcelable {
     fun getOrderState(): OrderState {
-        Log.d("wowOrderState","orderNumber: $orderNumber")
-        Log.d("wowOrderState","deliveryStatus: $deliveryStatus")
-        Log.d("wowOrderState","preparationStatus: $preparationStatus")
-        var curOrderStage =  OrderState.NONE
+        Log.d("wowOrderState", "orderNumber: $orderNumber")
+        Log.d("wowOrderState", "deliveryStatus: $deliveryStatus")
+        Log.d("wowOrderState", "preparationStatus: $preparationStatus")
+        var curOrderStage = OrderState.NONE
 
-        when(preparationStatus){
-            "idle" -> { curOrderStage = OrderState.NONE }
-            "received" -> { curOrderStage = OrderState.RECEIVED }
-            "in_progress" -> { curOrderStage = OrderState.PREPARED }
-            "completed" -> { curOrderStage = OrderState.PREPARED }
+        when (preparationStatus) {
+            "idle" -> {
+                curOrderStage = OrderState.NONE
+            }
+            "received" -> {
+                curOrderStage = OrderState.RECEIVED
+            }
+            "in_progress" -> {
+                curOrderStage = OrderState.PREPARED
+            }
+            "completed" -> {
+                curOrderStage = OrderState.PREPARED
+            }
         }
-        when(deliveryStatus){
-            "enroute" -> { curOrderStage = OrderState.ON_THE_WAY }
-            "on_the_way" -> { curOrderStage = OrderState.ON_THE_WAY }
-            "shipped" -> { curOrderStage = OrderState.DELIVERED }
+        when (deliveryStatus) {
+            "enroute" -> {
+                curOrderStage = OrderState.ON_THE_WAY
+            }
+            "on_the_way" -> {
+                curOrderStage = OrderState.ON_THE_WAY
+            }
+            "shipped" -> {
+                curOrderStage = OrderState.DELIVERED
+            }
         }
-        Log.d("wowOrderState","curOrderStage: $curOrderStage")
+        Log.d("wowOrderState", "curOrderStage: $curOrderStage")
         return curOrderStage
     }
 
-    fun getOrderStateTitle(orderState: OrderState): String?{
-        return when(orderState){
+    fun getOrderStateTitle(orderState: OrderState): String? {
+        return when (orderState) {
             OrderState.NONE -> "Your order"
             OrderState.RECEIVED -> "Order confirmed"
             OrderState.PREPARED -> "Preparing your order"
@@ -120,8 +130,8 @@
         }
     }
 
-    fun getOrderStateSubTitle(orderState: OrderState): String{
-        return when(orderState){
+    fun getOrderStateSubTitle(orderState: OrderState): String {
+        return when (orderState) {
             OrderState.NONE -> "Waiting for home chef confirmation"
             OrderState.RECEIVED -> "${restaurant?.firstName} received your order"
             OrderState.PREPARED -> "${restaurant?.firstName} is preparing your order"
@@ -150,11 +160,11 @@
     @Json(name = "price") val price: Price,
     @Json(name = "notes") var notes: String?,
     @Json(name = "_destroy") var _destroy: Boolean? = null
-): Parcelable {
-//     fun getRemovedIngredientsIds(): List<Long>{
+) : Parcelable {
+    //     fun getRemovedIngredientsIds(): List<Long>{
 //         return removedIngredients.mapNotNull { it.id }
 //     }
-    fun toOrderItemRequest(): OrderItemRequest{
+    fun toOrderItemRequest(): OrderItemRequest {
         return OrderItemRequest(
             id = id,
             notes = notes,
@@ -163,7 +173,8 @@
             _destroy = _destroy
         )
     }
-//    fun getRemovedIngredients(): String?{
+
+    //    fun getRemovedIngredients(): String?{
 //        var removedIngredientsStr: String? = null
 ////        if(removedIngredients.isNotEmpty()){
 ////            removedIngredientsStr = "Without: "
@@ -173,11 +184,11 @@
 ////        }
 //        return removedIngredientsStr?.substring(0, removedIngredientsStr.length - 2)
 //    }
-    fun getNoteStr(): String?{
-        if(notes.isNullOrEmpty()){
+    fun getNoteStr(): String? {
+        if (notes.isNullOrEmpty()) {
             return null
         }
-        return  "Special requests: $notes"
+        return "Special requests: $notes"
     }
 
 }
@@ -189,7 +200,7 @@
     val name: String,
     val fee: Price,
     val description: String
-): Parcelable
+) : Parcelable
 
 @Parcelize
 @JsonClass(generateAdapter = true)
@@ -203,4 +214,4 @@
     val transport_type: String?,
     val lat: Double?,
     val lng: Double?
-): Parcelable
\ No newline at end of file
+) : Parcelable
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-kapt'\r\napply plugin: 'kotlin-parcelize'\r\napply plugin: 'com.google.gms.google-services'\r\napply plugin: 'com.google.firebase.crashlytics'\r\napply plugin: \"androidx.navigation.safeargs.kotlin\"\r\n\r\n\r\nandroid {\r\n//    signingConfigs {\r\n//        signing_config {\r\n//            storeFile file('D:\\\\Monkeytech\\\\Keys\\\\WoodSpoon\\\\Eaters\\\\woodSpoonEaters.jks')\r\n//            storePassword 'kofkof12'\r\n//            keyPassword 'kofkof12'\r\n//            keyAlias = 'woodSpoonEaters'\r\n//        }\r\n//    }\r\n\r\n    compileSdkVersion rootProject.ext.compileSdkVersion\r\n    defaultConfig {\r\n        minSdkVersion 23\r\n        targetSdkVersion 30\r\n\r\n        applicationId \"com.bupp.wood_spoon_eater\"\r\n        versionCode 89\r\n        versionName \"2.3.0\"\r\n        signingConfig signingConfigs.debug\r\n\r\n    }\r\n\r\n\r\n    buildTypes {\r\n        release {\r\n            debuggable false\r\n            shrinkResources true\r\n            minifyEnabled true\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n            manifestPlaceholders[\"isTestMode\"] = \"false\"\r\n//            signingConfig signingConfigs.signing_config\r\n        }\r\n        debug {\r\n            debuggable true\r\n            manifestPlaceholders[\"isTestMode\"] = \"true\"\r\n        }\r\n    }\r\n\r\n    sourceSets {\r\n        main {\r\n            java {\r\n                srcDirs += 'build/generated/source/navigation-args'\r\n            }\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    kotlinOptions {\r\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\r\n    }\r\n\r\n    flavorDimensions \"flavor\"\r\n\r\n    productFlavors {\r\n        prodFlavor {\r\n            dimension \"flavor\"\r\n            applicationId \"com.bupp.wood_spoon_eaters\"\r\n        }\r\n        stagingFlavor {\r\n            dimension \"flavor\"\r\n            applicationId \"com.bupp.wood_spoon_eaters.staging\"\r\n        }\r\n    }\r\n\r\n    buildFeatures {\r\n        viewBinding true\r\n    }\r\n\r\n//    androidExtensions {\r\n//        experimental = true\r\n//    }\r\n\r\n//    lintOptions {\r\n//        checkReleaseBuilds false\r\n//        //If you want to continue even if errors found use following line\r\n//        abortOnError false\r\n//    }\r\n\r\n}\r\n\r\n\r\ndependencies {\r\n    implementation fileTree(include: ['*.jar'], dir: 'libs')\r\n\r\n    // Android Support\r\n    implementation 'androidx.appcompat:appcompat:1.3.0'\r\n\r\n    // Android\r\n    implementation 'com.google.android.material:material:1.3.0'\r\n    implementation \"androidx.navigation:navigation-fragment-ktx:2.3.5\"\r\n    implementation \"androidx.navigation:navigation-ui-ktx:2.3.5\"\r\n    implementation \"androidx.constraintlayout:constraintlayout:2.0.4\"\r\n\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:1.5.21\"\r\n    implementation \"org.jetbrains.kotlin:kotlin-reflect:1.5.21\"\r\n    implementation 'androidx.fragment:fragment-ktx:1.3.6'\r\n\r\n    //Support libraries\r\n    implementation 'com.android.support:appcompat-v7:26.0.1'\r\n    implementation 'com.android.support:support-v4:26.0.1'\r\n\r\n    //Paging - Flow\r\n    implementation \"androidx.paging:paging-runtime-ktx:$paging_version\"\r\n    implementation \"androidx.paging:paging-guava:$paging_version\"\r\n\r\n    //ui stuff\r\n    implementation 'it.sephiroth.android.library.targettooltip:target-tooltip-library:2.0.3'\r\n    implementation 'com.github.prolificinteractive:material-calendarview:2.0.1'\r\n    implementation 'com.github.kirich1409:viewbindingpropertydelegate:1.4.6'\r\n    implementation 'com.github.castorflex.smoothprogressbar:library:1.1.0'\r\n    implementation 'com.github.gayanvoice:android-animations-kotlin:1.0.1'\r\n    implementation 'com.github.sundeepk:compact-calendar-view:2.0.2.2'\r\n    implementation 'androidx.viewpager2:viewpager2:1.1.0-alpha01'\r\n    implementation 'com.andkulikov:transitionseverywhere:1.8.0'\r\n    implementation \"androidx.recyclerview:recyclerview:1.2.1\"\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.astuetz:pagerslidingtabstrip:1.0.1'\r\n//    implementation 'com.asksira.android:dropdownview:1.0.3'\r\n    implementation 'com.github.aliumujib:SwipeToRefresh:1.01'\r\n\r\n\r\n    implementation 'com.androidadvance:topsnackbar:1.1.1'\r\n    implementation 'com.trading212:sticky-headers:0.1.4'\r\n    implementation 'com.daasuu:EasingInterpolator:1.0.0'\r\n    implementation 'com.loopeer.lib:shadow:0.0.4-beta3'\r\n    implementation 'com.airbnb.android:lottie:3.7.0'\r\n    implementation 'me.relex:circleindicator:2.1.6'\r\n    implementation 'com.daasuu:BubbleLayout:1.2.0'\r\n\r\n    //image proccessing\r\n\r\n    implementation 'jp.wasabeef:glide-transformations:4.0.0'\r\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\r\n    implementation 'com.facebook.shimmer:shimmer:0.5.0'\r\n    implementation 'xyz.belvi.blurHash:blurHash:1.0.4'\r\n    kapt 'com.github.bumptech.glide:compiler:4.11.0'\r\n\r\n    //Google\r\n    implementation 'com.google.android.play:core:1.10.0'\r\n    implementation 'com.google.android.play:core-ktx:1.8.1'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'com.google.android.libraries.places:places:2.4.0'\r\n\r\n    //utils\r\n    implementation 'com.stripe:stripe-android:15.1.0'\r\n    implementation 'com.google.android:flexbox:2.0.1'\r\n    implementation 'me.grantland:autofittextview:0.2.1'\r\n    implementation \"in.co.ophio:secure-preferences:0.1.3\"\r\n    implementation 'com.mikhaellopez:ratebottomsheet:1.1.0'\r\n    implementation 'com.wdullaer:materialdatetimepicker:4.2.1'\r\n    implementation 'com.github.ibrahimsn98:PhoneNumberKit:1.6.2'\r\n    implementation 'com.github.rubensousa:gravitysnaphelper:2.2.1'\r\n    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0-alpha'\r\n    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-2'\r\n    implementation 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:3.0.0-RC3'\r\n\r\n    //exo player\r\n    implementation 'com.google.android.exoplayer:exoplayer-core:2.14.2'\r\n    implementation 'com.google.android.exoplayer:exoplayer-dash:2.14.2'\r\n    implementation 'com.google.android.exoplayer:exoplayer-ui:2.14.2'\r\n\r\n    //camera util\r\n    implementation 'com.github.dhaval2404:imagepicker:1.8'\r\n    implementation 'com.github.florent37:inline-activity-result-kotlin:1.0.4'\r\n\r\n    //Branch.io\r\n    // required for all Android apps\r\n    implementation 'io.branch.sdk.android:library:5.0.9'\r\n    // required if your app is in the Google Play Store (tip: avoid using bundled play services libs)\r\n    implementation 'com.google.firebase:firebase-appindexing:20.0.0'\r\n    implementation 'com.google.android.gms:play-services-ads-identifier:17.0.1'\r\n    // Chrome Tab matching (enables 100% guaranteed matching based on cookies)\r\n    implementation 'androidx.browser:browser:1.3.0'\r\n\r\n    //3rd party events\r\n    implementation 'com.uxcam:uxcam:3.3.5@aar'\r\n    implementation 'com.appsflyer:af-android-sdk:6.3.0'\r\n    implementation 'com.facebook.android:facebook-core:5.15.3'\r\n    implementation 'com.facebook.android:facebook-applinks:5.15.3'\r\n    implementation 'com.android.installreferrer:installreferrer:2.2'\r\n    implementation 'com.facebook.android:facebook-android-sdk:5.15.3'\r\n\r\n    implementation 'com.segment.analytics.android:analytics:4.9.4'\r\n    implementation 'com.appsflyer:segment-android-integration:6.3.0'\r\n    implementation 'com.android.installreferrer:installreferrer:2.2'\r\n    implementation 'com.segment.analytics.android.integrations:mixpanel:2.3.2'\r\n\r\n    //location\r\n    implementation 'com.google.android.gms:play-services-maps:17.0.1'\r\n    implementation 'com.google.android.gms:play-services-location:18.0.0'\r\n\r\n    //network\r\n    implementation 'io.reactivex.rxjava2:rxjava:2.2.20'\r\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'\r\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'\r\n//    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\r\n    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'\r\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\r\n    implementation 'com.squareup.okhttp3:okhttp:4.9.0'\r\n//    implementation 'com.google.code.gson:gson:2.8.6'\r\n\r\n    implementation \"com.squareup.moshi:moshi-kotlin:1.12.0\"\r\n    implementation \"com.squareup.retrofit2:converter-moshi:2.9.0\"\r\n    implementation 'com.squareup.moshi:moshi-adapters:1.11.0'\r\n    implementation \"com.squareup.moshi:moshi:1.12.0\"\r\n    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'\r\n    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.12.0'\r\n//    compileOnly 'com.squareup.moshi:moshi-kotlin-codegen:1.12.0'\r\n\r\n    //Kotlin Coroutines\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutineVersion\"\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion\"\r\n\r\n    //di\r\n    implementation \"io.insert-koin:koin-android:$koin_version\"\r\n    implementation \"io.insert-koin:koin-android-compat:$koin_version\"\r\n    implementation \"io.insert-koin:koin-androidx-workmanager:$koin_version\"\r\n\r\n    //AppCenter\r\n    implementation \"com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}\"\r\n    implementation \"com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}\"\r\n    implementation \"com.microsoft.appcenter:appcenter-distribute:${appCenterSdkVersion}\"\r\n\r\n    //FireBase\r\n    implementation 'com.google.firebase:firebase-core:19.0.0'\r\n    implementation 'com.google.firebase:firebase-analytics:19.0.0'\r\n    implementation 'com.google.firebase:firebase-messaging:22.0.0'\r\n    implementation 'com.google.firebase:firebase-crashlytics:18.0.1'\r\n    testImplementation 'junit:junit:4.13.2'\r\n\r\n    //view binding\r\n    implementation 'com.github.kirich1409:viewbindingpropertydelegate:1.4.7'\r\n\r\n    //skeleton\r\n    implementation 'com.facebook.shimmer:shimmer:0.5.0'\r\n}\r\n\r\napply plugin: 'com.google.gms.google-services'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 481bb159ff7dffe4a2618c6f7e21dfb3db9da684)
+++ app/build.gradle	(date 1630338334091)
@@ -23,8 +23,8 @@
         targetSdkVersion 30
 
         applicationId "com.bupp.wood_spoon_eater"
-        versionCode 89
-        versionName "2.3.0"
+        versionCode 90
+        versionName "2.3.1"
         signingConfig signingConfigs.debug
 
     }
